---
import { Picture } from 'astro:assets';

interface Props {
  src: string | ImageMetadata;
  alt: string;
  formats?: Array<'avif' | 'webp' | 'png' | 'jpg' | 'jpeg'>;
  width?: number;
  height?: number;
  class?: string;
  sizes?: string;
  loading?: 'lazy' | 'eager';
  decoding?: 'async' | 'sync' | 'auto';
  layout?: 'constrained' | 'full-width' | 'fixed';
  fit?: 'cover' | 'contain' | 'fill' | 'none';
  position?: string;
  pictureAttributes?: Record<string, any>;
}

const {
  src,
  alt,
  formats = ['avif', 'webp'],
  width,
  height,
  class: className,
  sizes = '100vw',
  loading = 'lazy',
  decoding = 'async',
  layout = 'constrained',
  fit = 'cover',
  position = 'center',
  pictureAttributes = {},
  ...rest
} = Astro.props;

// Determine if the src is a string (URL path) or an ImageMetadata object
const isRemoteImage = typeof src === 'string';
---

{isRemoteImage ? (
  <Picture
    src={src}
    alt={alt}
    formats={formats}
    width={width}
    height={height}
    class={className}
    sizes={sizes}
    loading={loading}
    decoding={decoding}
    layout={layout}
    fit={fit}
    position={position}
    pictureAttributes={pictureAttributes}
    {...rest}
  />
) : (
  <Picture
    src={src}
    alt={alt}
    formats={formats}
    width={width || src.width}
    height={height || src.height}
    class={className}
    sizes={sizes}
    loading={loading}
    decoding={decoding}
    layout={layout}
    fit={fit}
    position={position}
    pictureAttributes={pictureAttributes}
    {...rest}
  />
)}