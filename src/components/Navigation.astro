---
import data from '../data/site.json';

const { nav } = data;
---

<nav class='nav-container'>
  <ul class='nav-list' role='list'>
    <>
      {
        nav.map((link) => (
          <li
            class={`nav-item ${link.name === 'Landing' ? 'active' : ''}`}
            data-link={link.name.toLowerCase()}>
            <a href={link.link} class='text-dark fs-nav fw-medium'>
              {link.name}
            </a>
          </li>
        ))
      }
    </>
  </ul>
</nav>

<script>
  // Use IntersectionObserver to determine which link is active based on scroll position
  (() => {
    const sections = document.querySelectorAll('section') as NodeListOf<HTMLElement>;
    const navItems = [...document.querySelectorAll('.nav-item')] as HTMLElement[];

    const options = {
      threshold: 0,
      rootMargin: '-25%',
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (!entry.isIntersecting) return;

        const id = entry.target.getAttribute('id');

        navItems.forEach((item) => {
          item.classList.remove('active');

          if (item.dataset.link === id) {
            item.classList.add('active');
          }
        });
      });
    }, options);

    sections.forEach((section) => {
      observer.observe(section);
    });
  })();

  // Smooth scroll to clicked link's associated section
  (() => {
    const navLinks = document.querySelectorAll('.nav-item a') as NodeListOf<HTMLAnchorElement>;

    navLinks.forEach((link: HTMLAnchorElement) => {
      link.addEventListener('click', (e) => {
        e.preventDefault();

        // @ts-ignore
        const target = document.querySelector(link.getAttribute('href'));

        if (target) {
          target.scrollIntoView({
            behavior: 'smooth',
          });
        }
      });
    });
  })();

  // Make navigation more transparent when over landing section
  (() => {
    const navContainer = document.querySelector('.nav-container') as HTMLElement;
    const landingSection = document.querySelector('#landing') as HTMLElement;

    if (!navContainer || !landingSection) return;

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          // Landing section is visible, make nav more transparent
          navContainer.style.background = 'rgba(10, 10, 15, 0.1)';
        } else {
          // Landing section not visible, make nav less transparent
          navContainer.style.background = 'rgba(10, 10, 15, 0.3)';
        }
      });
    }, {
      threshold: 0.1, // Trigger when 10% of landing section is visible
      rootMargin: '-80px 0px 0px 0px' // Account for nav height
    });

    observer.observe(landingSection);
  })();
</script>

<style lang='scss'>
  .nav-container {
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    width: clamp(4rem, 12vw, 6rem);
    z-index: 100;
    display: flex;
    align-items: flex-start;
    justify-content: center;
    padding-top: var(--space-8);
  }

  .nav-list {
    display: flex;
    flex-direction: column;
    gap: var(--space-6);
    align-items: center;
  }

  .nav-item {
    position: relative;
    width: 100%;
    display: flex;
    justify-content: center;

    a {
      position: relative;
      color: var(--color-text-muted);
      font-size: var(--font-size-sm);
      font-weight: var(--font-weight-medium);
      text-transform: uppercase;
      letter-spacing: 0.05em;
      transition: all var(--transition-normal);
      writing-mode: vertical-rl;
      text-orientation: mixed;
      transform: rotate(180deg);
      padding: var(--space-2) 0;
    }

    &.active a,
    &:hover a,
    &:focus a {
      color: var(--color-accent-primary);
      transform: rotate(180deg) scale(1.1);
    }

    /* Active indicator */
    &.active::before,
    &:hover::before {
      content: '';
      position: absolute;
      right: -1rem;
      top: 50%;
      transform: translateY(-50%);
      width: 3px;
      height: 24px;
      background: var(--color-accent-gradient);
      border-radius: var(--radius-sm);
      opacity: 1;
    }

    &::before {
      content: '';
      position: absolute;
      right: -1rem;
      top: 50%;
      transform: translateY(-50%);
      width: 3px;
      height: 24px;
      background: var(--color-border);
      border-radius: var(--radius-sm);
      opacity: 0;
      transition: opacity var(--transition-normal);
    }

    &:hover::before {
      opacity: 0.5;
    }
  }

  /* Desktop styles */
  @media (min-width: 1080px) {
    .nav-container {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: auto;
      width: 100%;
      height: auto;
      padding: var(--space-6) 0;
      background: rgba(10, 10, 15, 0.3);
      backdrop-filter: blur(10px);
      border-bottom: 1px solid var(--color-border);
    }

    .nav-list {
      flex-direction: row;
      gap: var(--space-8);
      justify-content: center;
    }

    .nav-item {
      &:first-of-type {
        display: none;
      }

      a {
        writing-mode: horizontal-tb;
        text-orientation: mixed;
        transform: none;
        padding: var(--space-2) var(--space-4);
        border-radius: var(--radius-lg);
        background: transparent;
        backdrop-filter: none;
        border: none;
        font-size: var(--font-size-sm);
      }

      &.active a,
      &:hover a,
      &:focus a {
        background: var(--color-accent-primary);
        color: var(--color-text-primary);
        transform: none;
        box-shadow: none;
      }

      &::before {
        display: none;
      }
    }
  }

  /* Mobile styles */
  @media (max-width: 1079px) {
    .nav-item {
      a {
        writing-mode: horizontal-tb;
        text-orientation: mixed;
        transform: none;
        padding: var(--space-1) var(--space-2);
        font-size: var(--font-size-xs);
      }
    }
  }
</style>
